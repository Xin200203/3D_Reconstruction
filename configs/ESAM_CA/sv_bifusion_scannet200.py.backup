# 删除旧内容并替换为新的 CA-BiFusion 配置
# Bi-Fusion（Category-Agnostic，ScanNet200-SV）

# 继承上一阶段 TinySA CA 配置
_base_ = ['./sv3d_scannet200_ca.py']

custom_imports = dict(imports=['oneformer3d'])

# 仅在本文件内部使用 Config 类，改名 _Cfg，后续删除避免写入
from copy import deepcopy
from mmengine.config import Config as _Cfg
import inspect, os
# 直接定位 TinySA CA 配置文件
_cfg_dir = os.path.dirname(inspect.getfile(inspect.currentframe()))
_base_cfg = _Cfg.fromfile(os.path.join(_cfg_dir, 'sv3d_scannet200_ca.py'))
# 转为普通 list 以避免 ConfigList 的懒索引
train_pipeline = [item for item in _base_cfg.train_pipeline]
DATA_ROOT = '/home/nebula/xxy/ESAM/data/scannet200-sv/'

# 替换 ClipFeature 路径为绝对
train_pipeline.insert(1, dict(type='LoadClipFeature', data_root=DATA_ROOT))
# 添加图像加载（BiFusion 需要原始图像）
train_pipeline.insert(2, dict(type='LoadSingleImageFromFile'))
for item in train_pipeline:
    if item.get('type') in ['Pack3DDetInputs_', 'Pack3DDetInputs_Online']:
        item['keys'] = ['points', 'imgs', 'cam_info', 'clip_pix', 'clip_global'] + [k for k in item['keys'] if k not in ['imgs', 'cam_info', 'clip_pix', 'clip_global']]

# test / val pipeline 同理
test_pipeline = [item for item in _base_cfg.test_pipeline]
test_pipeline.insert(1, dict(type='LoadClipFeature', data_root=DATA_ROOT))
test_pipeline.insert(2, dict(type='LoadSingleImageFromFile'))
for item in test_pipeline:
    if item.get('type') in ['Pack3DDetInputs_', 'Pack3DDetInputs_Online']:
        item['keys'] = ['points', 'imgs', 'cam_info', 'clip_pix', 'clip_global'] + [k for k in item['keys'] if k not in ['imgs', 'cam_info', 'clip_pix', 'clip_global']]

# 删除 Config 对象，防止 mmengine.pretty_text 序列化出错
del _base_cfg

# 移除 _Cfg 以防泄漏
del _Cfg

# —— 模型部分：添加 Enhanced BiFusionEncoder ————
model = dict(
    # 保留父配置 backbone / neck，但新增 bi_encoder；在 MixFormer3D 类内部会优先使用 bi_encoder
    bi_encoder=dict(
        type='BiFusionEncoder',
        clip_pretrained='/home/nebula/xxy/ESAM/data/open_clip_pytorch_model.bin',
        voxel_size=0.02,
        
        # Enhanced CLIP配置
        clip_num_layers=6,              # 使用前6层Transformer
        freeze_clip_conv1=False,        # 允许conv1微调
        freeze_clip_early_layers=True,  # 冻结前3层
        
        # Enhanced Gate配置
        use_enhanced_gate=True,         # 启用增强Gate机制
        use_spatial_attention=True,     # 启用空间注意力
        spatial_k=16,                   # K近邻数量
        
        # 其他配置
        use_amp=True,
        use_tiny_sa_2d=False,
    ),
    
    # 添加CLIP一致性损失
    clip_criterion=dict(
        type='ClipConsCriterion',
        loss_weight=0.1,  # 开始时使用较小权重
    ),
)

# —— 继续训练：加载上一阶段权重（仅回填 3D 分支） ————
load_from = '/home/nebula/xxy/ESAM/work_dirs/sv3d_scannet200_ca/best_all_ap_50%_epoch_128.pth'

# ——— 数据集路径与 ann_file 覆写 ——————————————————————————
data_root = DATA_ROOT  # 覆写父级变量

# 覆写并显式声明所有字段
train_dataloader = dict(
    batch_size=4,           # 先尝试 4
    num_workers=8,
    persistent_workers=True,
    dataset=dict(
    data_root=DATA_ROOT,
        ann_file='scannet200_sv_oneformer3d_infos_train_clip.pkl',
        pipeline=train_pipeline)  # 使用修改后的 pipeline
)

val_dataloader = dict(dataset=dict(
    data_root=DATA_ROOT,
    ann_file='scannet200_sv_oneformer3d_infos_val_clip.pkl',
    pipeline=test_pipeline))  # 使用修改后的 pipeline

test_dataloader = val_dataloader 

# ---------- 资源调度：单卡 4090 ----------
train_dataloader.update(batch_size=4, num_workers=8, persistent_workers=True)

# ---------- 日志配置：实时监控 gate_mean / valid_ratio ----------
log_processor = dict(type='LogProcessor', window_size=1, by_epoch=True)
default_hooks = dict(logger=dict(type='LoggerHook', interval=50)) 